{"version":3,"sources":["../static/js/0.7ca9bdb8.chunk.js","component/ChordPlayer.js","../node_modules/babel-runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime-module.js","../node_modules/regenerator-runtime/runtime.js"],"names":["webpackJsonp","28","module","__webpack_exports__","__webpack_require__","_asyncToGenerator","fn","gen","apply","this","arguments","Promise","resolve","reject","step","key","arg","info","value","error","done","then","err","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default","n","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","protoProps","staticProps","prototype","ChordPlayer","audioContext","window","AudioContext","webkitAudioContext","samples","isLoading","gainNode","createGain","gain","compressor","createDynamicsCompressor","threshold","knee","ratio","attack","release","stereoPanner","createStereoPanner","pan","connect","destination","loadSamples","sampleNotes","baseUrl","note","fetch","response","arrayBuffer","decodeAudioData","audioBuffer","console","log","warn","time","duration","sampleNote","findClosestSample","source","createBufferSource","buffer","targetFreq","noteToFrequency","sampleFreq","playbackRate","setValueAtTime","linearRampToValueAtTime","exponentialRampToValueAtTime","start","stop","keys","closestNote","minDiff","Math","abs","diff","notes","octave","parseInt","match","noteIndex","indexOf","replace","pow","_ref2","a","mark","_callee2","checkLoading","setTimeout","state","resume","startTime","currentTime","forEach","index","noteStartTime","playSample","random","29","exports","30","g","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","oldRuntime","undefined","e","31","global","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","tryCatch","obj","type","call","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","method","AsyncIterator","invoke","record","result","hasOwn","__await","unwrapped","enqueue","callInvokeWithMethodAndArg","previousPromise","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","GenStateSuspendedYield","iterator","return","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","Op","hasOwnProperty","$Symbol","Symbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","constructor","displayName","isGeneratorFunction","genFun","ctor","name","setPrototypeOf","__proto__","awrap","async","iter","toString","object","reverse","pop","skipTempReset","prev","charAt","slice","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield"],"mappings":"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","file":"static/js/0.7ca9bdb8.chunk.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 28:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{return Promise.resolve(value).then(function(value){step(\"next\",value);},function(err){step(\"throw\",err);});}}return step(\"next\");});};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var ChordPlayer=function(){function ChordPlayer(){_classCallCheck(this,ChordPlayer);this.audioContext=new(window.AudioContext||window.webkitAudioContext)();this.samples={};this.isLoading=true;// 创建音频处理节点\nthis.gainNode=this.audioContext.createGain();this.gainNode.gain.value=0.5;// 创建压缩器\nthis.compressor=this.audioContext.createDynamicsCompressor();this.compressor.threshold.value=-24;this.compressor.knee.value=30;this.compressor.ratio.value=12;this.compressor.attack.value=0.003;this.compressor.release.value=0.25;// 创建立体声效果\nthis.stereoPanner=this.audioContext.createStereoPanner();this.stereoPanner.pan.value=0;// 连接音频处理链\nthis.gainNode.connect(this.compressor);this.compressor.connect(this.stereoPanner);this.stereoPanner.connect(this.audioContext.destination);// 加载吉他采样\nthis.loadSamples();}_createClass(ChordPlayer,[{key:'loadSamples',value:function(){var _ref=_asyncToGenerator(/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee(){var sampleNotes,baseUrl,_iteratorNormalCompletion,_didIteratorError,_iteratorError,_iterator,_step,note,response,arrayBuffer,audioBuffer;return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:sampleNotes=['C4','E4','G4','C5'];// 基本音符采样\nbaseUrl='https://raw.githubusercontent.com/nbrosowsky/tonejs-instruments/master/samples/guitar-acoustic/';_context.prev=2;_iteratorNormalCompletion=true;_didIteratorError=false;_iteratorError=undefined;_context.prev=6;_iterator=sampleNotes[Symbol.iterator]();case 8:if(_iteratorNormalCompletion=(_step=_iterator.next()).done){_context.next=23;break;}note=_step.value;_context.next=12;return fetch(''+baseUrl+note+'.mp3');case 12:response=_context.sent;_context.next=15;return response.arrayBuffer();case 15:arrayBuffer=_context.sent;_context.next=18;return this.audioContext.decodeAudioData(arrayBuffer);case 18:audioBuffer=_context.sent;this.samples[note]=audioBuffer;case 20:_iteratorNormalCompletion=true;_context.next=8;break;case 23:_context.next=29;break;case 25:_context.prev=25;_context.t0=_context['catch'](6);_didIteratorError=true;_iteratorError=_context.t0;case 29:_context.prev=29;_context.prev=30;if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}case 32:_context.prev=32;if(!_didIteratorError){_context.next=35;break;}throw _iteratorError;case 35:return _context.finish(32);case 36:return _context.finish(29);case 37:this.isLoading=false;console.log('Guitar samples loaded successfully');_context.next=45;break;case 41:_context.prev=41;_context.t1=_context['catch'](2);console.warn('Failed to load guitar samples, falling back to synthesized sound',_context.t1);this.isLoading=false;case 45:case'end':return _context.stop();}}},_callee,this,[[2,41],[6,25,29,37],[30,,32,36]]);}));function loadSamples(){return _ref.apply(this,arguments);}return loadSamples;}()// 播放采样音频\n},{key:'playSample',value:function playSample(note,time,duration){// 找到最接近的采样音符\nvar sampleNote=this.findClosestSample(note);if(!sampleNote||!this.samples[sampleNote]){console.warn('Sample not found for note:',note);return;}var source=this.audioContext.createBufferSource();var gainNode=this.audioContext.createGain();source.buffer=this.samples[sampleNote];// 计算音高比率\nvar targetFreq=this.noteToFrequency(note);var sampleFreq=this.noteToFrequency(sampleNote);source.playbackRate.value=targetFreq/sampleFreq;// 设置音量包络\ngainNode.gain.setValueAtTime(0,time);gainNode.gain.linearRampToValueAtTime(1,time+0.01);gainNode.gain.exponentialRampToValueAtTime(0.3,time+0.3);gainNode.gain.exponentialRampToValueAtTime(0.001,time+duration);source.connect(gainNode);gainNode.connect(this.gainNode);source.start(time);source.stop(time+duration);}// 找到最接近的采样音符\n},{key:'findClosestSample',value:function findClosestSample(note){var sampleNotes=Object.keys(this.samples);if(sampleNotes.length===0)return null;var targetFreq=this.noteToFrequency(note);var closestNote=sampleNotes[0];var minDiff=Math.abs(this.noteToFrequency(closestNote)-targetFreq);var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=sampleNotes[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var sampleNote=_step2.value;var diff=Math.abs(this.noteToFrequency(sampleNote)-targetFreq);if(diff<minDiff){minDiff=diff;closestNote=sampleNote;}}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}return closestNote;}// 将音名转换为频率\n},{key:'noteToFrequency',value:function noteToFrequency(note){var notes=['C','C#','D','D#','E','F','F#','G','G#','A','A#','B'];var octave=parseInt(note.match(/\\d+/)[0],10);var noteIndex=notes.indexOf(note.replace(/\\d+/,''));if(noteIndex===-1)return null;// A4 = 440Hz\nreturn 440*Math.pow(2,(noteIndex-9)/12+(octave-4));}// 播放和弦\n},{key:'playChord',value:function(){var _ref2=_asyncToGenerator(/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee2(notes){var _this=this;var duration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;var startTime;return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(this.audioContext){_context2.next=3;break;}console.error('AudioContext not initialized');return _context2.abrupt('return');case 3:if(!this.isLoading){_context2.next=7;break;}console.log('Waiting for samples to load...');_context2.next=7;return new Promise(function(resolve){var checkLoading=function checkLoading(){if(!_this.isLoading){resolve();}else{setTimeout(checkLoading,100);}};checkLoading();});case 7:if(!(this.audioContext.state==='suspended')){_context2.next=10;break;}_context2.next=10;return this.audioContext.resume();case 10:startTime=this.audioContext.currentTime;// 为每个音符播放采样\nnotes.forEach(function(note,index){// 添加轻微的时间差来模拟拨弦\nvar noteStartTime=startTime+index*0.02;_this.playSample(note,noteStartTime,duration);});// 随机设置立体声位置，使声音更自然\nthis.stereoPanner.pan.value=Math.random()*0.4-0.2;case 13:case'end':return _context2.stop();}}},_callee2,this);}));function playChord(_x2){return _ref2.apply(this,arguments);}return playChord;}()}]);return ChordPlayer;}();/* harmony default export */ __webpack_exports__[\"default\"] = (ChordPlayer);\n\n/***/ }),\n\n/***/ 29:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(30);\n\n\n/***/ }),\n\n/***/ 30:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(31);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/0.7ca9bdb8.chunk.js","class ChordPlayer {\n    constructor() {\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        this.samples = {};\n        this.isLoading = true;\n        \n        // 创建音频处理节点\n        this.gainNode = this.audioContext.createGain();\n        this.gainNode.gain.value = 0.5;\n\n        // 创建压缩器\n        this.compressor = this.audioContext.createDynamicsCompressor();\n        this.compressor.threshold.value = -24;\n        this.compressor.knee.value = 30;\n        this.compressor.ratio.value = 12;\n        this.compressor.attack.value = 0.003;\n        this.compressor.release.value = 0.25;\n\n        // 创建立体声效果\n        this.stereoPanner = this.audioContext.createStereoPanner();\n        this.stereoPanner.pan.value = 0;\n\n        // 连接音频处理链\n        this.gainNode.connect(this.compressor);\n        this.compressor.connect(this.stereoPanner);\n        this.stereoPanner.connect(this.audioContext.destination);\n\n        // 加载吉他采样\n        this.loadSamples();\n    }\n\n    async loadSamples() {\n        const sampleNotes = ['C4', 'E4', 'G4', 'C5'];  // 基本音符采样\n        const baseUrl = 'https://raw.githubusercontent.com/nbrosowsky/tonejs-instruments/master/samples/guitar-acoustic/';\n        \n        try {\n            for (let note of sampleNotes) {\n                const response = await fetch(`${baseUrl}${note}.mp3`);\n                const arrayBuffer = await response.arrayBuffer();\n                const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n                this.samples[note] = audioBuffer;\n            }\n            this.isLoading = false;\n            console.log('Guitar samples loaded successfully');\n        } catch (error) {\n            console.warn('Failed to load guitar samples, falling back to synthesized sound', error);\n            this.isLoading = false;\n        }\n    }\n\n    // 播放采样音频\n    playSample(note, time, duration) {\n        // 找到最接近的采样音符\n        const sampleNote = this.findClosestSample(note);\n        if (!sampleNote || !this.samples[sampleNote]) {\n            console.warn('Sample not found for note:', note);\n            return;\n        }\n\n        const source = this.audioContext.createBufferSource();\n        const gainNode = this.audioContext.createGain();\n        \n        source.buffer = this.samples[sampleNote];\n        \n        // 计算音高比率\n        const targetFreq = this.noteToFrequency(note);\n        const sampleFreq = this.noteToFrequency(sampleNote);\n        source.playbackRate.value = targetFreq / sampleFreq;\n\n        // 设置音量包络\n        gainNode.gain.setValueAtTime(0, time);\n        gainNode.gain.linearRampToValueAtTime(1, time + 0.01);\n        gainNode.gain.exponentialRampToValueAtTime(0.3, time + 0.3);\n        gainNode.gain.exponentialRampToValueAtTime(0.001, time + duration);\n\n        source.connect(gainNode);\n        gainNode.connect(this.gainNode);\n        \n        source.start(time);\n        source.stop(time + duration);\n    }\n\n    // 找到最接近的采样音符\n    findClosestSample(note) {\n        const sampleNotes = Object.keys(this.samples);\n        if (sampleNotes.length === 0) return null;\n\n        const targetFreq = this.noteToFrequency(note);\n        let closestNote = sampleNotes[0];\n        let minDiff = Math.abs(this.noteToFrequency(closestNote) - targetFreq);\n\n        for (let sampleNote of sampleNotes) {\n            const diff = Math.abs(this.noteToFrequency(sampleNote) - targetFreq);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestNote = sampleNote;\n            }\n        }\n\n        return closestNote;\n    }\n\n    // 将音名转换为频率\n    noteToFrequency(note) {\n        const notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n        const octave = parseInt(note.match(/\\d+/)[0], 10);\n        const noteIndex = notes.indexOf(note.replace(/\\d+/, ''));\n        \n        if (noteIndex === -1) return null;\n        \n        // A4 = 440Hz\n        return 440 * Math.pow(2, (noteIndex - 9) / 12 + (octave - 4));\n    }\n\n    // 播放和弦\n    async playChord(notes, duration = 2) {\n        if (!this.audioContext) {\n            console.error('AudioContext not initialized');\n            return;\n        }\n\n        // 如果还在加载采样，等待加载完成\n        if (this.isLoading) {\n            console.log('Waiting for samples to load...');\n            await new Promise(resolve => {\n                const checkLoading = () => {\n                    if (!this.isLoading) {\n                        resolve();\n                    } else {\n                        setTimeout(checkLoading, 100);\n                    }\n                };\n                checkLoading();\n            });\n        }\n\n        // 如果AudioContext被挂起，则恢复\n        if (this.audioContext.state === 'suspended') {\n            await this.audioContext.resume();\n        }\n\n        const startTime = this.audioContext.currentTime;\n\n        // 为每个音符播放采样\n        notes.forEach((note, index) => {\n            // 添加轻微的时间差来模拟拨弦\n            const noteStartTime = startTime + index * 0.02;\n            this.playSample(note, noteStartTime, duration);\n        });\n\n        // 随机设置立体声位置，使声音更自然\n        this.stereoPanner.pan.value = Math.random() * 0.4 - 0.2;\n    }\n}\n\nexport default ChordPlayer;\n\n\n\n// WEBPACK FOOTER //\n// ./src/component/ChordPlayer.js","module.exports = require(\"regenerator-runtime\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/regenerator/index.js\n// module id = 29\n// module chunks = 0","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/regenerator-runtime/runtime-module.js\n// module id = 30\n// module chunks = 0","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/regenerator-runtime/runtime.js\n// module id = 31\n// module chunks = 0"],"sourceRoot":""}